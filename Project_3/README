a. Rui Lu (rl2784), Ruijie Zhang (rz2337)

b. <list of files>
- src/
    - INTEGRATED-DATASET.csv
    - Database.java
    - Rule.java
    - Lt.java
    - Tools.java
    - Main.java
    - Makefile
    - run.sh
    - example-run.txt
- README

c. <detailed description of databases>
(a) which NYC Open Data data set(s) you used to generate the INTEGRATED-DATASET file; 
(b) what (high-level) procedure you used to map the original NYC Open Data data set(s) into your INTEGRATED-DATASET file; 
(c) what makes your choice of INTEGRATED-DATASET file interesting (in other words, justify your choice of NYC Open Data data set(s)).

d. <how to run our program>
(a) Compile
    Run "make" under src directory to compile
(b) Run
    Run "./run.sh <csv file> <min_sup> <min_conf>"
    Note that if facing "Permission Denied" when running run.sh, run "chmod +x run.sh" first.
    Example:  ./run.sh INTEGRATED-DATASET.csv 0.002 0.8

e. <internal design>
Except the Main class, our program has 4 classes, Database, Rule, Lt, Tools. The first three are used to store three types of data structure, namely the input database, generated association rules and the the set of large itemsets. The final class Tools will keeps some other functions, like the function to generate association rules.

The class Database will be initialized by giving a table, represented by ArrayList of ArrayList of String, and the two threshold. After getting the input table, it will generate the "dictionary" of all present items in the constructor function to form the "first cancidates".
Another function, generate_Lt(ArrayList<ArrayList<String>> candidates), inside Database will generate the large itemset by computing the support of each row of the input "cancidates". To compute the support of a row (a itemset), we create another function count(ArrayList<String> s) to compute the number of presence of the input itemset and get the support rate.

Each object of class Rule will store one association rule, the left term, the right term and the confidence.

And each object of class Lt will store all large itemsets with same number of items, as the way told in course. It will store the actual support rate of each itemset as well, so when we want to compute the association rules, we don't need to calculate the support rate again.
We put the function to generate the cancidates of next level, generate_cancidates(), inside the class Lt. In this function, it will first enumerate every pair of itemset, check whether they have same prefix while the last item of the first itemset is smaller than the last item of the second itemset.
And for each found pair, we generate a potential cancidate, and throw it into the function validate(ArrayList<String> s). This function will check whether every subset of the input potential cancidate with size n could be found in the set of this Lt, which corresponds to the second part of the algorithm.
To find the support of an itemset easily, we store the pair of itemset and its support into a map inside its Lt class and use a function to return the support. It's used when we generate the association rules.

At last, in class Tools, there are two functions. The first function ArrayList<ArrayList<String>> generateTable(String fileName) will read the database from the csv file. The second function ArrayList<Rule> generateRuleset(ArrayList<Lt> allLts, double confidence) will generate association rules, stored in ArrayList of class Rule. The input ArrayList of class Lt must in ascending order of item number. The function will start with Lt class with two items, enumerate each itemset, try to remove an item from it and find the rest itemset from Lt class of previous level to get its support rate and calculate confidence. All association rules whose confidence rate is larger than the threshold will be added into the result.

In generally, our program works as follows:
1. read database from csv file and create a Database object.
2. using the original cancidates from the Database as the first cancidate set. Keeps generate Lt using a for loop until the new Lt class is empty.
3. generate association rules.
4. wrtie data into files.

f. <command line specification of an interesting sample run>
	&& <explain why the result is interesting>
(a) Specific command line:
    ./run INTEGRATED-DATASET.csv 0.002 0.8
(b) Why the result is interesting:
Our INTEGRATED-DATASET.csv is generated by the data records of Citi bike in New York city which includes records of when and where people use citi bike and some information, like age and gender of customers. 
So we want to dig out some interesting pattern of how people use Citi bike. We hope to get some rules which could indicate how long customers usually use Citi bike and some special pattern between start station, stop station and duration.
Here are some top rules of the example:
[Male, StartStation: 223-W 13 St & 7 Ave] => [Duration: 0~15min] (Conf: 91.6373858046381%, Supp:2.1525966522499917%)
[Male, StartStation: 173-Broadway & W 49 St] => [Duration: 0~15min] (Conf: 89.83152827918171%, Supp:2.4645911056819307%)
[StartStation: 223-W 13 St & 7 Ave] => [Duration: 0~15min] (Conf: 89.19786096256685%, Supp:2.753474858859652%)
[Male, StartStation: 116-W 17 St & 8 Ave] => [Duration: 0~15min] (Conf: 88.52908891328211%, Supp:2.6626828221466536%)
[Male, StartStation: 229-Great Jones St] => [Duration: 0~15min] (Conf: 88.16738816738817%, Supp:2.017233979332431%)
The first rule indicates that males would like to take a ride for about 0~15 minutes when they start from start station: 223-W 13 St & 7 Ave. From google map, we could know that the station is in between of Midtown and Lower Manhattan which seems to be a downtown area and it's close to a subway station. So perhaps lots of males would go to this station, perhaps by subway, and use citi bike to travel to other place in the nearby.
Actually all five top rules here indicate similar results.
We also get some other rules with high confidence, like
	[StartStation: 173-Broadway & W 49 St] => [Male] (Conf: 80.13500482160076%, Supp:2.7435702730364158%)
	[40] => [Male] (Conf: 80.54914628518691%, Supp:17.288454554458717%)
From those two rules, we know that more thant 80% people whose age is in 40~49, or start from station 173-Broadway & W 49 St are males. Perhaps males are more like to ride a bike, compared with females.


g. <additional information>
